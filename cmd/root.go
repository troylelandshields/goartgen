package cmd

import (
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"

	"github.com/spf13/cobra"
)

const (
	autoGenWarning = `

: Code generated by goartgen. DO NOT EDIT.
: source: %s
`
)

var rootCmd = &cobra.Command{
	Use:   "goartgen",
	Short: "goartgen copies .slides files into a .gen.artlce file so you can easily have both when using go present",
	Run: func(cmd *cobra.Command, args []string) {

		var filePath string
		if len(args) != 0 {
			filePath = args[0]
		}

		slideFiles, err := findSlideFiles(filePath)
		if err != nil {
			fmt.Println("error occurred", err)
			os.Exit(1)
		}

		err = createAritcleFiles(slideFiles)
		if err != nil {
			fmt.Println("error occurred", err)
			os.Exit(1)
		}
	},
}

func Execute() {
	if err := rootCmd.Execute(); err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
}

func findSlideFiles(searchDir string) ([]string, error) {
	if searchDir == "" {
		var err error
		searchDir, err = os.Getwd()
		if err != nil {
			return nil, err
		}
	}

	fileList := make([]string, 0)
	err := filepath.Walk(searchDir, func(path string, f os.FileInfo, err error) error {
		if !strings.HasSuffix(f.Name(), ".slide") {
			return nil
		}
		fileList = append(fileList, path)
		return nil
	})

	if err != nil {
		return nil, err
	}

	return fileList, nil
}

func createAritcleFiles(slideFiles []string) error {
	for _, slideFile := range slideFiles {
		artName := strings.Replace(slideFile, ".slide", ".gen.article", -1)

		if artName == slideFile {
			return fmt.Errorf("expected different filename: %s %s \n", artName, slideFile)
		}

		fmt.Println("copying", slideFile, artName)
		err := copy(slideFile, artName)
		if err != nil {
			return err
		}
	}

	return nil
}

func copy(src, dst string) error {
	in, err := os.Open(src)
	if err != nil {
		return err
	}
	defer in.Close()

	out, err := os.Create(dst)
	if err != nil {
		return err
	}
	defer out.Close()

	_, err = io.Copy(out, in)
	if err != nil {
		return err
	}

	autoGenWarning := fmt.Sprintf(autoGenWarning, src)
	_, err = out.Write([]byte(autoGenWarning))
	if err != nil {
		return err
	}

	return out.Close()
}
